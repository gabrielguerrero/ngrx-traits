import { createMultiSelectionTraitActions } from './multi-selection.trait.actions';
import { SortEntitiesActions, SortEntitiesKeyedConfig } from '../sort';
import { createMultiSelectionTraitSelectors } from './multi-selection.trait.selectors';
import {
  SelectEntitiesSelectors,
  SelectEntitiesActions,
} from './multi-selection.model';
import {
  EntitiesPaginationActions,
  EntitiesPaginationKeyedConfig,
} from '../pagination/pagination.model';
import {
  LoadEntitiesActions,
  LoadEntitiesKeyedConfig,
  LoadEntitiesSelectors,
  loadEntitiesTraitKey,
} from '../load-entities/load-entities.model';
import { createTraitFactory } from 'ngrx-traits';
import { CrudEntitiesActions } from '../crud/crud.model';
import {
  createMultiSelectionInitialState,
  createMultiSelectionTraitReducer,
} from './multi-selection.trait.reducer';
import { createMultiSelectionTraitMutators } from './multi-selection.trait.mutators';
import { FilterEntitiesActions } from '../filter';
import {
  TraitActionsFactoryConfig,
  TraitInitialStateFactoryConfig,
  TraitSelectorsFactoryConfig,
  TraitStateMutatorsFactoryConfig,
} from 'ngrx-traits';

/**
 * Generates ngrx code to add multi selection to a list
 *
 * @example
 * // The following trait config
 *
 * export interface TestState
 * extends EntityAndStatusState<Todo>,MultipleSelectionState{}
 *
 *    const traits = createEntityFeatureFactory(
 *      addLoadEntities<Todo>(),
 *      addMultiSelection<Todo>()
 *    )({
 *      actionsGroupKey: '[Todos]',
 *      featureSelector: createFeatureSelector<TestState>>(
 *        'todos',
 *      ),
 *    });
 * // will generate  the following actions and selectors, plus the ones generated by other traits
 * traits.actions.multiSelect({id})
 * traits.actions.multiDeselect({id})
 * traits.actions.multiToggleSelect({id})
 * traits.actions.toggleSelectAll()
 * traits.actions.multiClearSelection()
 *
 * traits.selectors.selectIdSelected()
 * traits.selectors.selectEntitySelected()
 */
export function addSelectEntities<Entity>() {
  return createTraitFactory({
    key: 'multiSelection',
    depends: [loadEntitiesTraitKey],
    actions: ({ actionsGroupKey }: TraitActionsFactoryConfig) =>
      createMultiSelectionTraitActions(actionsGroupKey),
    selectors: ({ previousSelectors }: TraitSelectorsFactoryConfig) =>
      createMultiSelectionTraitSelectors<Entity>(
        previousSelectors as LoadEntitiesSelectors<Entity>
      ),
    initialState: ({ previousInitialState }: TraitInitialStateFactoryConfig) =>
      createMultiSelectionInitialState<Entity>(previousInitialState),
    mutators: ({ allSelectors }: TraitStateMutatorsFactoryConfig) =>
      createMultiSelectionTraitMutators<Entity>(
        allSelectors as SelectEntitiesSelectors<Entity>
      ),
    reducer: ({ initialState, allActions, allMutators, allConfigs }) =>
      createMultiSelectionTraitReducer(
        initialState,
        allActions as SelectEntitiesActions &
          CrudEntitiesActions<Entity> &
          SortEntitiesActions<Entity> &
          LoadEntitiesActions<Entity> &
          FilterEntitiesActions<any> &
          EntitiesPaginationActions,
        allMutators,
        allConfigs as LoadEntitiesKeyedConfig<Entity> &
          EntitiesPaginationKeyedConfig &
          SortEntitiesKeyedConfig<Entity>
      ),
  });
}
